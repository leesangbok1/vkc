{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "rewrites": {
    "beforeFiles": [],
    "afterFiles": [],
    "fallback": []
  },
  "dynamicRoutes": [
    {
      "page": "/api/answers/[id]",
      "regex": "^/api/answers/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/answers/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/answers/[id]/accept",
      "regex": "^/api/answers/([^/]+?)/accept(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/answers/(?<nxtPid>[^/]+?)/accept(?:/)?$"
    },
    {
      "page": "/api/answers/[id]/comments",
      "regex": "^/api/answers/([^/]+?)/comments(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/answers/(?<nxtPid>[^/]+?)/comments(?:/)?$"
    },
    {
      "page": "/api/answers/[id]/helpful",
      "regex": "^/api/answers/([^/]+?)/helpful(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/answers/(?<nxtPid>[^/]+?)/helpful(?:/)?$"
    },
    {
      "page": "/api/answers/[id]/vote",
      "regex": "^/api/answers/([^/]+?)/vote(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/answers/(?<nxtPid>[^/]+?)/vote(?:/)?$"
    },
    {
      "page": "/api/answers/[id]/vote/status",
      "regex": "^/api/answers/([^/]+?)/vote/status(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/answers/(?<nxtPid>[^/]+?)/vote/status(?:/)?$"
    },
    {
      "page": "/api/notifications/[id]",
      "regex": "^/api/notifications/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/notifications/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/questions/[id]",
      "regex": "^/api/questions/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/questions/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/questions/[id]/answers",
      "regex": "^/api/questions/([^/]+?)/answers(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/questions/(?<nxtPid>[^/]+?)/answers(?:/)?$"
    },
    {
      "page": "/api/questions/[id]/comments",
      "regex": "^/api/questions/([^/]+?)/comments(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/questions/(?<nxtPid>[^/]+?)/comments(?:/)?$"
    },
    {
      "page": "/api/questions/[id]/vote",
      "regex": "^/api/questions/([^/]+?)/vote(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/questions/(?<nxtPid>[^/]+?)/vote(?:/)?$"
    },
    {
      "page": "/api/questions/[id]/vote/status",
      "regex": "^/api/questions/([^/]+?)/vote/status(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/questions/(?<nxtPid>[^/]+?)/vote/status(?:/)?$"
    },
    {
      "page": "/questions/[id]",
      "regex": "^/questions/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/questions/(?<nxtPid>[^/]+?)(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/auth/callback",
      "regex": "^/auth/callback(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/callback(?:/)?$"
    },
    {
      "page": "/questions",
      "regex": "^/questions(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/questions(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "rsc",
    "varyHeader": "rsc, next-router-state-tree, next-router-prefetch, next-router-segment-prefetch",
    "prefetchHeader": "next-router-prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "next-router-segment-prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  }
}