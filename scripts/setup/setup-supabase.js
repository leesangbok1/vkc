#!/usr/bin/env node

/**
 * Supabase ÌôòÍ≤Ω ÏÑ§Ï†ï Î∞è Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Ïä§ÌÅ¨Î¶ΩÌä∏
 * Ïã§Ï†ú Supabase ÌîÑÎ°úÏ†ùÌä∏Î°ú Ï†ÑÌôòÌïòÎäî ÏûêÎèôÌôî ÎèÑÍµ¨
 */

import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

console.log('üöÄ Supabase ÌôòÍ≤Ω ÏÑ§Ï†ï Î∞è ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÎèÑÍµ¨')
console.log('=====================================\n')

/**
 * 1. ÌôòÍ≤Ω Î≥ÄÏàò ÌôïÏù∏
 */
function checkEnvironmentVariables() {
  console.log('üîç ÌôòÍ≤Ω Î≥ÄÏàò ÌôïÏù∏ Ï§ë...')

  const requiredEnvVars = [
    'NEXT_PUBLIC_SUPABASE_URL',
    'NEXT_PUBLIC_SUPABASE_ANON_KEY'
  ]

  const envPath = path.join(__dirname, '../.env')

  if (!fs.existsSync(envPath)) {
    console.error('‚ùå .env ÌååÏùºÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§.')
    return false
  }

  const envContent = fs.readFileSync(envPath, 'utf8')

  for (const envVar of requiredEnvVars) {
    if (!envContent.includes(envVar) || envContent.includes(`${envVar}=your-`)) {
      console.log(`‚ö†Ô∏è  ${envVar} ÏÑ§Ï†ïÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.`)
      return false
    }
  }

  console.log('‚úÖ ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï ÏôÑÎ£å\n')
  return true
}

/**
 * 2. ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÌååÏùº Î™©Î°ù ÌôïÏù∏
 */
function listMigrationFiles() {
  console.log('üìã ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÌååÏùº Î™©Î°ù:')

  const migrationsDir = path.join(__dirname, '../supabase/migrations')

  if (!fs.existsSync(migrationsDir)) {
    console.error('‚ùå migrations ÎîîÎ†âÌÜ†Î¶¨Í∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§.')
    return []
  }

  const files = fs.readdirSync(migrationsDir)
    .filter(file => file.endsWith('.sql'))
    .sort()

  files.forEach((file, index) => {
    console.log(`   ${index + 1}. ${file}`)
  })

  console.log(`\n‚úÖ Ï¥ù ${files.length}Í∞úÏùò ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÌååÏùº Î∞úÍ≤¨\n`)
  return files
}

/**
 * 3. SQL ÌååÏùº ÎÇ¥Ïö© Í≤ÄÏ¶ù
 */
function validateMigrationFiles(files) {
  console.log('üîç ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÌååÏùº Í≤ÄÏ¶ù Ï§ë...')

  const migrationsDir = path.join(__dirname, '../supabase/migrations')
  let isValid = true

  files.forEach(file => {
    const filePath = path.join(migrationsDir, file)
    const content = fs.readFileSync(filePath, 'utf8')

    // Í∏∞Î≥∏ Í≤ÄÏ¶ù
    if (content.length < 100) {
      console.log(`‚ö†Ô∏è  ${file}: ÌååÏùºÏù¥ ÎÑàÎ¨¥ ÏßßÏäµÎãàÎã§.`)
      isValid = false
    }

    // SQL Íµ¨Î¨∏ ÌôïÏù∏
    if (!content.includes('CREATE TABLE') && !content.includes('CREATE POLICY')) {
      console.log(`‚ö†Ô∏è  ${file}: CREATE Íµ¨Î¨∏ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.`)
      isValid = false
    }
  })

  if (isValid) {
    console.log('‚úÖ Î™®Îì† ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÌååÏùºÏù¥ Ïú†Ìö®Ìï©ÎãàÎã§.\n')
  }

  return isValid
}

/**
 * 4. ÌòÑÏû¨ ÏÑ§Ï†ï ÏÉÅÌÉú ÌôïÏù∏
 */
function checkCurrentStatus() {
  console.log('üìä ÌòÑÏû¨ ÏÑ§Ï†ï ÏÉÅÌÉú:')

  const envPath = path.join(__dirname, '../.env')
  const envContent = fs.readFileSync(envPath, 'utf8')

  // Mock Î™®Îìú ÌôïÏù∏
  const isMockMode = envContent.includes('NEXT_PUBLIC_MOCK_MODE=true')
  console.log(`   Mock Mode: ${isMockMode ? 'üü° ÌôúÏÑ±Ìôî (Í∞úÎ∞ú Î™®Îìú)' : 'üü¢ ÎπÑÌôúÏÑ±Ìôî (Ïã§Ï†ú DB)'}`)

  // Supabase URL ÌôïÏù∏
  const hasRealUrl = envContent.includes('supabase.co') && !envContent.includes('your-project-ref')
  console.log(`   Supabase URL: ${hasRealUrl ? 'üü¢ Ïã§Ï†ú URL ÏÑ§Ï†ïÎê®' : 'üü° ÌîåÎ†àÏù¥Ïä§ÌôÄÎçî ÏÉÅÌÉú'}`)

  // OAuth ÏÑ§Ï†ï ÌôïÏù∏
  const hasGoogleOAuth = !envContent.includes('NEXT_PUBLIC_GOOGLE_CLIENT_ID=your-')
  const hasFacebookOAuth = !envContent.includes('NEXT_PUBLIC_FACEBOOK_APP_ID=your-')
  const hasKakaoOAuth = !envContent.includes('NEXT_PUBLIC_KAKAO_CLIENT_ID=your-')

  console.log(`   Google OAuth: ${hasGoogleOAuth ? 'üü¢ ÏÑ§Ï†ïÎê®' : 'üü° ÎØ∏ÏÑ§Ï†ï'}`)
  console.log(`   Facebook OAuth: ${hasFacebookOAuth ? 'üü¢ ÏÑ§Ï†ïÎê®' : 'üü° ÎØ∏ÏÑ§Ï†ï'}`)
  console.log(`   Kakao OAuth: ${hasKakaoOAuth ? 'üü¢ ÏÑ§Ï†ïÎê®' : 'üü° ÎØ∏ÏÑ§Ï†ï'}`)

  console.log('')

  return {
    isMockMode,
    hasRealUrl,
    hasGoogleOAuth,
    hasFacebookOAuth,
    hasKakaoOAuth
  }
}

/**
 * 5. Îã§Ïùå Îã®Í≥Ñ ÏïàÎÇ¥
 */
function showNextSteps(status) {
  console.log('üéØ Îã§Ïùå Îã®Í≥Ñ ÏïàÎÇ¥:')
  console.log('=================')

  if (!status.hasRealUrl) {
    console.log('\nüìå 1Îã®Í≥Ñ: Supabase ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ±')
    console.log('   1. https://supabase.com Ï†ëÏÜç')
    console.log('   2. ÏÉà ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ±: "viet-kconnect"')
    console.log('   3. Project URLÍ≥º anon key Î≥µÏÇ¨')
    console.log('   4. .env ÌååÏùºÏùò NEXT_PUBLIC_SUPABASE_URL, NEXT_PUBLIC_SUPABASE_ANON_KEY ÏóÖÎç∞Ïù¥Ìä∏')
  }

  console.log('\nüìå 2Îã®Í≥Ñ: Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò')
  console.log('   1. Supabase ÎåÄÏãúÎ≥¥Îìú ‚Üí SQL Editor')
  console.log('   2. supabase/migrations/001_initial_schema.sql ÎÇ¥Ïö© Î≥µÏÇ¨ ‚Üí Ïã§Ìñâ')
  console.log('   3. supabase/migrations/002_rls_policies.sql ÎÇ¥Ïö© Î≥µÏÇ¨ ‚Üí Ïã§Ìñâ')

  if (!status.hasGoogleOAuth || !status.hasFacebookOAuth || !status.hasKakaoOAuth) {
    console.log('\nüìå 3Îã®Í≥Ñ: OAuth ÏÑ§Ï†ï')
    console.log('   ‚Ä¢ Google: https://console.cloud.google.com/')
    console.log('   ‚Ä¢ Facebook: https://developers.facebook.com/')
    console.log('   ‚Ä¢ Kakao: https://developers.kakao.com/')
  }

  if (status.isMockMode) {
    console.log('\nüìå 4Îã®Í≥Ñ: Mock Î™®Îìú ÎπÑÌôúÏÑ±Ìôî')
    console.log('   .env ÌååÏùºÏóêÏÑú NEXT_PUBLIC_MOCK_MODE=falseÎ°ú Î≥ÄÍ≤Ω')
  }

  console.log('\nüìå 5Îã®Í≥Ñ: ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±')
  console.log('   npm run db:generate')

  console.log('\nüìå 6Îã®Í≥Ñ: Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Ïû¨ÏãúÏûë')
  console.log('   npm run dev')
}

/**
 * Î©îÏù∏ Ïã§Ìñâ Ìï®Ïàò
 */
async function main() {
  try {
    // ÌôòÍ≤Ω Î≥ÄÏàò ÌôïÏù∏
    const envValid = checkEnvironmentVariables()

    // ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÌååÏùº ÌôïÏù∏
    const migrationFiles = listMigrationFiles()

    if (migrationFiles.length === 0) {
      console.error('‚ùå ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.')
      process.exit(1)
    }

    // ÌååÏùº Í≤ÄÏ¶ù
    const filesValid = validateMigrationFiles(migrationFiles)

    if (!filesValid) {
      console.error('‚ùå ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÌååÏùº Í≤ÄÏ¶ù Ïã§Ìå®')
      process.exit(1)
    }

    // ÌòÑÏû¨ ÏÉÅÌÉú ÌôïÏù∏
    const status = checkCurrentStatus()

    // Îã§Ïùå Îã®Í≥Ñ ÏïàÎÇ¥
    showNextSteps(status)

    console.log('\n‚úÖ Supabase ÏÑ§Ï†ï Ï§ÄÎπÑ ÏôÑÎ£å!')
    console.log('   ÏúÑÏùò Îã®Í≥ÑÎ•º ÏàúÏÑúÎåÄÎ°ú Îî∞Îùº ÏßÑÌñâÌïòÏÑ∏Ïöî.')

  } catch (error) {
    console.error('‚ùå ÏÑ§Ï†ï Ï§ë Ïò§Î•ò Î∞úÏÉù:', error.message)
    process.exit(1)
  }
}

// CLIÏóêÏÑú ÏßÅÏ†ë Ïã§ÌñâÎêú Í≤ΩÏö∞
if (import.meta.url === `file://${process.argv[1]}`) {
  main()
}

export { main, checkEnvironmentVariables, listMigrationFiles }